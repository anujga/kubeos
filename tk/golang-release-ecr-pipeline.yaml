apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: golang-release-ecr
spec:
  description: |
    golang-release-ecr
  params:
  - name: repo-url
    type: string
    description: The git repository URL to clone from.
  - name: branch-name
    type: string
    description: The git branch to clone.
  - name: imageUrl
    type: string
  - name: imageTag
    type: string
    
  workspaces:
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the repo's README.md file to be read.

  tasks:
  - name: fetch-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.repo-url)
    - name: revision
      value: $(params.branch-name)

  - name: cat-readme
    runAfter: ["fetch-repo"]  # Wait until the clone is done before reading the readme.
    workspaces:
    - name: source
      workspace: shared-data
    taskSpec:
      workspaces:
      - name: source
      steps:
      - image: zshusers/zsh:4.3.15
        script: |
          #!/usr/bin/env zsh
          cat $(workspaces.source.path)/README.md

  - name: go-build
    runAfter: 
    - fetch-repo

    conditions:
      - conditionRef: "go-test"
        resources:
          - name: source-repo
            resource: source-repo

    workspaces:
    - name: source
      workspace: shared-data
    taskRef:
      name: golang-make
    params:
    - name: args
      value: make
                
  - name: docker-build-publish
    taskRef:
      name: kaniko
    runAfter: ["go-build"]
    workspaces:
    - name: source
      workspace: shared-data
    params:
    # - name: CONTEXT
    #   value: ./
    # - name: DOCKERFILE
    #   value: Dockerfile
    - name: IMAGE
      value: $(params.imageUrl):$(params.imageTag)

---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: go-test
  namespace: getting-started
spec:
  resources:
    - name: source-repo
      type: git
  check:
    image: golang
    command: ["go"]
    workingDir: "$(resources.source-repo.path)"
    args: ['test', "./..."]
